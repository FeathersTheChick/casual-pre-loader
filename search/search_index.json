{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#download-the-latest-release-here","title":"Download the latest release Here.","text":""},{"location":"#thank-you-3","title":"Thank you &lt;3:","text":"<p>THE GOAT This person made the square_series preset.</p> <p>Skeleton Hotel.</p> <p>Taxicat and Qorange for the transparent_flamethrower.</p> <p>Ashe_tf for fixing the medicgun_beam.</p> <p>SonOfDiscordiA for the short_circuit.</p> <p>agrastiOs for the UltimateVisualFixPack.</p> <p>Feathers for help with documentation. </p> <p>djsigmann for help with AUR packaging, documentation, and other misc development.</p> <p>Akuji for being a huge help with discord support and misc development.</p>"},{"location":"#star-history","title":"Star History","text":""},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Here you can find common questions and info about them. For more in-depth troubleshooting, please refer to this page.</p> <p>If you encounter any error, please try upgrading to the latest version first.</p>"},{"location":"faq/#what-is-this","title":"What is this?","text":"<p>This is an all-in-one preloading tool indented to be used in Valve casual servers.</p>"},{"location":"faq/#but-what-is-a-preloader","title":"But, what is a preloader?","text":"<p>A preloader is a tool that enables the ability to load custom content in an offline server before joining an official server. If done correctly, Team Fortress 2 will not unload this custom content on map change, thereby enabling the use of mods. While this preloader may accomplish this using various methods, it still relies on loading into an offline map as a mandatory step. Hence the name, 'Casual Preloader'.</p>"},{"location":"faq/#why-should-i-use-this-over-the-other-options","title":"Why should I use this over the other options?","text":"<p>Unlike the other preloaders, this one doesn't need 'casual compatible' mods to work (though they still function as normal). It is also the only preloader that can load particles as well as models, materials, animations, vgui elements, skyboxes, decals, and lightwarps. It is also being constantly updated.</p>"},{"location":"faq/#will-this-get-me-vac-banned","title":"Will this get me VAC banned?","text":"<p>No. This program does not interact with VAC in any way. If you wish to know more about how the program works, please read about it here.</p>"},{"location":"faq/#will-this-get-me-banned-from-rgl","title":"Will this get me banned from RGL?","text":"<p>Yes. If you get caught using custom particles you will be issued a 1 year ban, read about it here. However if you just want to use it for flat textures, that is allowed.</p>"},{"location":"faq/#what-mods-work-with-this-preloader","title":"What mods work with this preloader?","text":"<p>Most mods will work with this preloader, but heres a detailed list. If your mods are not working please refer to this page.</p>"},{"location":"faq/#working-mods","title":"Working mods","text":"<ul> <li>Particles</li> <li>Models</li> <li>Animations</li> <li>VGUI elements</li> <li>Lightwarps</li> <li>Skyboxes</li> <li>Warpaints<ul> <li>(up to 06/14/25)</li> </ul> </li> <li>Game sounds<ul> <li>(everything except blacklisted sounds)</li> </ul> </li> </ul>"},{"location":"faq/#not-working-mods","title":"NOT working mods","text":"<ul> <li>Decals<ul> <li>(coming very soon)</li> </ul> </li> </ul>"},{"location":"faq/#how-do-i-use-this","title":"How do I use this?","text":"<p>Download the preloader, click RUNME.bat, then drag and drop your mods. From there just follow the on screen instructions. For a more in-depth tutorial, click here. The tutorial includes a linux version aswell.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":"<p>For troubleshooting, please refer to this page.</p>"},{"location":"howwork/","title":"How does this work?","text":"<p>Here you can find an in-depth explanation to how this preloader works in a step by step process. The project is also open source, so if you wish to dig in the files yourself, feel free! If you wanna contact cueki, or anyone else who has worked on anything with this preloader for more details about it, join the discord and shoot us a message!</p>"},{"location":"howwork/#explanation","title":"Explanation:","text":"<p>There are two exploits in use, one that many are familiar with, being the <code>game_info</code> change (nothing really noteworthy here, since it has been known widely since at least 2020), and the second being that the game doesn't actually check the md5 hashes outlined in the directory vpk. I combine both of these in order to \"replace\" the particles already present in the game with modded ones, which then point to the custom directory for their material files.</p> <p>When first approaching this, I had no idea about the md5 hash being unchecked, I stumbled across that fact by accident some time in August 2023. (Surely this has no correlation to any events whatsoever.)</p> <p>While the game may not enforce the hashes, it does enforce the file sizes, therefore, in order to replace any of the files in the game, I need to ensure that the replacement is the same size or less than whats already there, if it's smaller, I can simply pad it out with whitespace bytes to keep the dir vpk happy. This ultimately means that, in order to get custom particles working, I had to learn how particle files were structured, and then use that knowledge to remove any redundant data so that I could use that extra space for modded data.</p>"},{"location":"howwork/#so-fundamentally-the-process-works-as-follows","title":"So fundamentally, the process works as follows:","text":"<ol> <li>Figure out what mods the user is actually adding<ul> <li>Mod makers will sometimes cluster their particle effects into one giant file for simplicity's sake, and to force the load order of the game. This works, and is actually pretty clever, but unfortunately goes directly against what I am trying to accomplish because it assumes that whatever particle effects are not being modified are contained within the games files, and I am replacing those directly. Therefore, I must look at the files being presented to the application and use a reverse lookup to figure out what particles are actually being referenced, the mapping is found inside of <code>particle_system_map.json</code> <p>This process can be found in: <code>operations/advanced_particle_merger.py</code>.</p> </li> </ul> </li> <li>Rebuild the particle files<ul> <li>Now that we know what particle elements are actually being modified, we now need to make sure that the particle files we put in the game are not missing anything. If, for example, you just want to replace the short circuits blinding awful no good very bad flashbang by modifying just the <code>dxhr_lightningball</code>, you could patch that back into the game no issue, but then the machina would no longer have any tracers and the widowmaker would lose its shell ejections, because they are all part of the same particle file. So we use the same mapping of <code>particle_system_map.json</code> to get the rest of the particle elements from the games base files, and combine them all into one <code>dxhr_fx.pcf</code> then patch that back into the game. This is worse than it looks because the tree structure of the particle files is annoying to traverse. Sometimes the names in the string dictionary are different, sometimes Valve has duplicate elements in different files by mistake. All part of the process. <p>This process can be found in: <code>operations/pcf_rebuild.py</code>.</p> </li> </ul> </li> <li>Compress the particle files<ul> <li>Once the files have been rebuilt there is a new problem, they are too big to fit within the vpks. As mentioned above, my solution to this problem was to find any redundant data within the particle files that I could remove. Turns out, the particle files are about 3.5x larger than they need to be. You can look at the code to see exactly what I'm doing, mostly just removing duplicate data, updating references, and making the internal structure more efficient. This ratio is not linear, the larger the file the better the compression, while smaller files have much less to work with. <p>This process can be found in: <code>operations/pcf_compress.py</code>.</p> </li> </ul> </li> <li>Patch the files back into the vpk<ul> <li>Once we have the compressed particle files, we then need to patch them back into the game's multi-file misc vpks. Most vpk tools do not allow for direct modification of vpks without unpacking and repacking, so I wrote my own parser and handler. <p>This process can be found in: <code>core/handlers/file_handler.py</code>.</p> </li> </ul> </li> <li>Move files into the game<ul> <li>Then we need to get the specified effect materials into the games custom dir, as well as whatever else is needed. I get only the files needed from looking inside the pcf at the materials attribute path. Then, I pack them back into a vpk just for better load times. I also add a config file that loads the itemtest map on startup, so that all the custom stuff gets loaded. <p>This process can be found in a bunch of various scripts.</p> </li> </ul> </li> </ol> <p>There are many details of the problem-solving process that I may elaborate on in the future.</p> <p>Therefore, skipping over the details of me slowly figuring this all out, the most difficult problem I wanted to solve was providing a solution that actually worked for the average TF2 player, and that's how we got here.</p> <p>-cueki :)</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Here you can find common troublshooting problems and potential fixes/solutions. If none of these work, or your problem isn't listed here, please join the discord and open a support ticket.</p> <p>If you encounter any error, please try upgrading to the latest version first.</p>"},{"location":"troubleshooting/#this-mod-doesnt-workmy-mod-doesnt-work","title":"This mod doesn't work!/My mod doesn't work!","text":""},{"location":"troubleshooting/#for-users-installing-mods","title":"For users installing mods:","text":"<ol> <li>All of your mods should be in the preloader, not custom.<ul> <li>The only thing you should keep in custom (if you want to) is your hud.</li> </ul> </li> <li>Check your load order.<ul> <li>The preloader will tell you if any files are conflicting with one another and use that to decide what should take priority. Animations should be installed last in the load order if you have custom weapon models.</li> </ul> </li> <li>Make sure you have all of your desired mods checked off before installing.</li> <li>Make sure you're launching with <code>+exec w/config.cfg</code>.</li> <li>Make sure the mod has correct file pathing.<ul> <li>While the preloader can handle most mods, even non-'casual compatible' ones, they will need to reflect the file structure of TF2. You can either contact the mod author to fix it, or follow the instructions in the 'For users creating mods:' section to fix it yourself.</li> </ul> </li> <li>If you change huds after installing your mods, make sure to run the preloader again.</li> <li>If there was a TF2 update, run the preloader again. <p>NOTE: There are a select few mods that WON'T work when put in the preloader, they are as follows:</p> <ul> <li> <p>Bsp packed content (think modern community maps).</p> </li> <li> <p>Blacklisted sounds (for now).</p> </li> <li> <p>Decals (for now).</p> </li> <li> <p>Configs (these can stay in custom).</p> </li> <li> <p>No hats mod (this should also stay in custom).</p> </li> <li> <p>Custom named materials and models (ONLY works with casual compatible file paths).</p> </li> </ul> </li> </ol>"},{"location":"troubleshooting/#for-users-creating-mods","title":"For users creating mods:","text":"<p>While this tool doesn't need a mod to be 'casual compatible' for it to work, there's still some issues that will need to be addressed. </p> <ol> <li>When making mods, please make sure to include at least the VTF and the base TF2 model itself. If the model is a custom model, please add in a VMT as well.</li> <li>Make sure that your paths reflect the structure of tf2!<ul> <li>For example, if you're making a pyro cosmetic, the file path SHOULD look like this: <code>models/workshop/player/items/pyro/dec17_cats_pajamas/dec17_cats_pajamas.mdl</code></li> <li>NOT like this: <code>models/alaxe/tf2/cosmetics/pyro_female/charred_chainmail.mdl</code></li> </ul> </li> <li>If you're using 'casual compatible' paths, custom names are valid for materials ONLY.</li> <li>Double check your VMT's are calling the correct paths.</li> <li>Make sure your textures (VTF'S) have <code>no mipmap</code> and <code>no level of detail</code> checkmarked so textures don't break.</li> </ol> <p>The preloader also includes an easy sorting system with the use of <code>mod.json</code>, which can help end users sort their mods in the preloader easier. To use it, create a json file called mod.json, and paste this example inside: </p> <pre><code>{\n  \"addon_name\": \"your mod name here\",\n  \"type\": \"use one of these categories: Experimental, HUD, Misc, Texture, Animation, Sound, Skin, or Model\",\n  \"description\": \"a brief desctription of what your mod is and what it does\",\n  \"gamebanana_link\": \"the link to your mods gamebanana page\",\n}\n</code></pre>"},{"location":"troubleshooting/#i-got-a-vac-error-i-dont-wanna-get-banned","title":"I got a VAC error! I dont wanna get banned!","text":"<p>The \"<code>Disconnected: An issue with your computer is blocking the VAC system. You cannot play on secure servers.</code>\" error has nothing to do with the preloader, and is a pretty common Steam bug. To fix it, simply restart steam. If that doesnt work, try verifying the integrity of your game files, and running the preloader again.</p>"},{"location":"troubleshooting/#common-issuesbugs","title":"Common issues/bugs","text":"<p>This section contains known bugs/issues with the preloader, and fixes for them in case you happen to encounter any.</p> <p>NOTE: If your game is crashing out of the blue, it is most likely an issue with the mods you have installed, and not the preloader. Please troubleshoot your mods FIRST before seeking further assistance in the discord.</p>"},{"location":"troubleshooting/#linux","title":"Linux","text":"<ol> <li>Sometimes a bug with quickprecache can crash your TF2 instance on launch. Just launch again to fix it.</li> <li>Black weapons/models. Just reboot.</li> </ol>"},{"location":"troubleshooting/#windows","title":"Windows","text":"<ol> <li>Auto updater not working. This could be for a plethora of reasons, but the easiest fix is to just install the new version of the preloader manually.</li> </ol>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Here you can find two tutorials, one for Windows, and one for Linux. If you're having trouble with your already installed preloader, please refer to the troubleshooting doc.</p> <p>If you encounter any error, please try upgrading to the latest version first.</p> <p>If you need further assistance installing the preloader, or just want to chat, join the discord!</p> <p>If you want a video supplement, please refer to the Video Supplement section!</p>"},{"location":"tutorial/#windows-tutorial","title":"Windows Tutorial:","text":""},{"location":"tutorial/#step-1-installation","title":"Step 1: Installation","text":"<ol> <li>Install the latest version of the preloader from GitHub or Gamebanana.</li> <li>Once you have the zip file, extract it, and put the folder anywhere you'd like (OTHER THAN CUSTOM, DO NOT PUT IT IN CUSTOM!). Personally, I keep mine on my desktop.</li> </ol>"},{"location":"tutorial/#step-2-adding-your-mods","title":"Step 2: Adding your mods","text":"<ol> <li>Prepare your mods. The preloader can handle all mods, even mods that aren't 'casual compatible', so don't be afraid to use whatever you'd like! Once you have all the mods you want, set them aside. While you can put your hud in the preloader, it does the exact same thing as putting it in custom, so you don't have to if you don't want to.</li> <li>Open the preloader by running <code>RUNME.bat</code>, and follow the first-time set-up instructions that pop up. The 'import' tab can be ignored unless you're updating from a super old version of the preloader, or decided not to let the auto-updater update your preloader.</li> <li>Once the preloader is open, drag and drop your mods anywhere over the window to import them.</li> </ol>"},{"location":"tutorial/#step-3-configuring-your-mods","title":"Step 3: Configuring your mods","text":"<ol> <li> <p>The first tab of the preloader is for your particles, on this tab you can mix and match your different particle packs for whatever look you're going for. If you want even more in-depth customization, instead of the general groups we put the particles into, navigate to the top left of your window, and un-check 'simple particle mode'.</p> </li> <li> <p>The second tab of the preloader is everything else, including your models, animations, huds, skins, skyboxes, etc. You first check all the mods you want to use on the left by clicking on the check box next to them, then change the load order on the right by clicking and dragging. If you have an animation pack, and any model mod, make sure to load your animation pack last!</p> <p>NOTE: Some mods you install may have the same files included. The preloader warns you of this with this caution symbol. For mods like this, make sure the one you want to see more of is HIGHER in your load order (bigger number). You can also hover over the caution symbol to see how many files are the same (like a minecraft texture pack!).</p> </li> </ol>"},{"location":"tutorial/#step-4-installing-your-mods-to-tf2","title":"Step 4: Installing your mods to TF2","text":"<ol> <li> <p>Don't forget to add <code>+exec w/config.cfg</code> to your launch options! You can do this by going onto the page for your game in steam. Then, you go to settings, down to properties, then paste the command in your launch options!</p> </li> <li> <p>Click install on the bottom right!</p> </li> <li> <p>Launch tf2 and boot up a casual match! You should see all of your mods working.</p> </li> </ol>"},{"location":"tutorial/#linux-tutorial","title":"Linux Tutorial:","text":"<p>ples fix  and format dis for me im not familiar with the steps needed for the linux version, or just send me the general steps on discord and ill rewrite and format :D -Fethars the chick</p> <p>We need studiomdl.exe from the Windows version of TF2.</p> <p>First, force the use of proton in game properties, make sure to click \"update\" after.</p> <p></p> <p>Once updated, navigate to your <code>Steam/steamapps/common/Team Fortress 2/</code> and rename bin/ to something other than bin/, for example, bin_/.</p> <p></p> <p>Disable proton in game properties, and update again.</p> <p></p> <p>Back in <code>Steam/steamapps/common/Team Fortress 2/</code>, rename bin_/ back to bin/ to merge the directories, or copy its contents into bin/.</p> <p></p> <p>If done right, you should now see <code>studiomdl.exe</code> inside the bin/ folder!</p> <p></p> <p>Now you can clone the repo, or install it as an AUR package!</p> <p>Using yay:</p> <pre><code>yay -S casual-pre-loader-git\ncasual-pre-loader\n</code></pre> <p>Using paru:</p> <pre><code>paru -S casual-pre-loader-git\ncasual-pre-loader\n</code></pre> <p>Or with git:</p> <pre><code>git clone https://github.com/cueki/casual-pre-loader\ncd casual-pre-loader\npython -m venv .venv\nsource .venv/bin/activate # (you will need to activate the venv each time)\npip install -r requirements.txt\npython main.py\n</code></pre> <p>If you're on Ubuntu, or an Ubuntu-based derivative (such as Mint or PopOS), you may get an error similiar to the following:</p> <pre><code>This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.\n</code></pre> <p>Installing <code>libxcb-cursor-dev</code> should solve the issue:</p> <pre><code>sudo apt-get install -y libxcb-cursor-dev\n</code></pre>"},{"location":"tutorial/#video-supplement","title":"Video Supplement:","text":"<p>This will eventually be updated to the most recent version, and have a linux section - Feathers</p>"}]}